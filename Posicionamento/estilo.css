body{
    background:#007fc7;
}

h1{
    text-align:center;
}

#TagPosition{
    background:#fff;
    width:800px;
    margin:20px auto;
    position:relative;
}

#margin{
    background:#fff;
    width:800px;
    margin:20px auto;/*Deixando o left/right no automático, a div centraliza automáticamente*/
    
    /*--->Note que no código foram colocados dois valores, lembre-se da regra que com dois valores. O primeiro valor vai pra top e bottom, e o segundo valor vai pra left e right. A regra dos 4 valores vale aqui também.*/
}

#static{
    background:#fff;
    width:800px;
    margin:20px auto;
    position:static;/*--->Com o uso do position:static; nada muda pois esse é o padrão.*/
}

#relative{
    background:#fff;
    border:2px solid red;
    width:800px;
    position:relative;/*-->Adicionando a tag “position:relative;” nada acontece, pois falta os parâmetros de tamanho. Para isso usamos top, right, bottom e left e adicionamos ou retiramos os pixels, daí a posição se altera.*/
    top:30px;
    left:70px;
}

#absolute{
    background:#fff;
    border:2px solid blue;
    width:800px;
    position:absolute;
    top:auto;
    left:auto;
    
    /*Quando acrescentamos a posição absolute, os demais parágrafos começam a se comportar como se aquele com a position:absolute; não existisse.

    Ao contrário do relative( muda de posição de acordo com  o ponto de sua própria caixa), o absolute muda de acordo com o ponto principal da caixa dos outros( a caixa pai mais próxima que não seja static). Se todas as divs em volta do absolute forem static, ele irá se orientar de acordo com o body mesmo.*/
}

#fixed{/*--->O fixed é o mais simples, ele fixa o elemento na tela e ele fica na mesma posição mesmo rolando a página. É ideal para chats e menus.*/
    
    background:#fff;
    border:2px solid green;
    width:800px;
    position:fixed;
    top:30px;
    left:70px;
}